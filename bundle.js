(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.streamingAvailability = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchByTitleOutputLanguageEnum = exports.SearchByTitleSeriesGranularityEnum = exports.SearchByTitleShowTypeEnum = exports.SearchByFiltersOrderByEnum = exports.SearchByFiltersGenresRelationEnum = exports.SearchByFiltersSeriesGranularityEnum = exports.SearchByFiltersShowTypeEnum = exports.SearchByFiltersOutputLanguageEnum = exports.LeavingOutputLanguageEnum = exports.LeavingTargetTypeEnum = exports.GetByIdOutputLanguageEnum = exports.GetByIdSeriesGranularityEnum = exports.ChangesOutputLanguageEnum = exports.ChangesTargetTypeEnum = exports.ChangesChangeTypeEnum = exports.DefaultApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Query the new, removed or updated movies/series/seasons/episodes in a given list of streaming services. Results are ordered by the date of the changes. Changes listed per page is \"25\" when \"target_type\" is \"show\", \"movie\" or \"series\"; \"50\" when it is \"season\"; and \"100\" when it is \"episode\". Note that changes for the same show are aggregated together into a single \"changes\" array for that show. Which means there might be cases where the count of the items in the result array might be fewer than the maximum changes listed per page. (i.e. When \"target_type\" is \"season\", there might be 10 items in the result array, but the overall total number of changes listed across the \"changes\" arrays will be still 50, given that there are at least 50 changes matches with the given query.)
     * Changes
     */
    DefaultApi.prototype.changesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.country === null || requestParameters.country === undefined) {
                            throw new runtime.RequiredError('country', 'Required parameter requestParameters.country was null or undefined when calling changes.');
                        }
                        if (requestParameters.services === null || requestParameters.services === undefined) {
                            throw new runtime.RequiredError('services', 'Required parameter requestParameters.services was null or undefined when calling changes.');
                        }
                        if (requestParameters.changeType === null || requestParameters.changeType === undefined) {
                            throw new runtime.RequiredError('changeType', 'Required parameter requestParameters.changeType was null or undefined when calling changes.');
                        }
                        if (requestParameters.targetType === null || requestParameters.targetType === undefined) {
                            throw new runtime.RequiredError('targetType', 'Required parameter requestParameters.targetType was null or undefined when calling changes.');
                        }
                        queryParameters = {};
                        if (requestParameters.country !== undefined) {
                            queryParameters['country'] = requestParameters.country;
                        }
                        if (requestParameters.services !== undefined) {
                            queryParameters['services'] = requestParameters.services;
                        }
                        if (requestParameters.changeType !== undefined) {
                            queryParameters['change_type'] = requestParameters.changeType;
                        }
                        if (requestParameters.targetType !== undefined) {
                            queryParameters['target_type'] = requestParameters.targetType;
                        }
                        if (requestParameters.since !== undefined) {
                            queryParameters['since'] = requestParameters.since;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.desc !== undefined) {
                            queryParameters['desc'] = requestParameters.desc;
                        }
                        if (requestParameters.outputLanguage !== undefined) {
                            queryParameters['output_language'] = requestParameters.outputLanguage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/changes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ChangesResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Query the new, removed or updated movies/series/seasons/episodes in a given list of streaming services. Results are ordered by the date of the changes. Changes listed per page is \"25\" when \"target_type\" is \"show\", \"movie\" or \"series\"; \"50\" when it is \"season\"; and \"100\" when it is \"episode\". Note that changes for the same show are aggregated together into a single \"changes\" array for that show. Which means there might be cases where the count of the items in the result array might be fewer than the maximum changes listed per page. (i.e. When \"target_type\" is \"season\", there might be 10 items in the result array, but the overall total number of changes listed across the \"changes\" arrays will be still 50, given that there are at least 50 changes matches with the given query.)
     * Changes
     */
    DefaultApi.prototype.changes = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.changesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all the supported countries and the list of the supported services and their details for each country. Details of services include names, logos, supported streaming types (subscription, rent, buy, free etc.) and list of available addons/channels.
     * Countries
     */
    DefaultApi.prototype.countriesRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/countries",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CountriesResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all the supported countries and the list of the supported services and their details for each country. Details of services include names, logos, supported streaming types (subscription, rent, buy, free etc.) and list of available addons/channels.
     * Countries
     */
    DefaultApi.prototype.countries = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.countriesRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the ids and names of the supported genres.
     * Genres
     */
    DefaultApi.prototype.genresRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/genres",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.GenresResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get the ids and names of the supported genres.
     * Genres
     */
    DefaultApi.prototype.genres = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.genresRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the details of a show via IMDb or TMDb id, including the global streaming availability info.
     * Get by Id
     */
    DefaultApi.prototype.getByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.imdbId !== undefined) {
                            queryParameters['imdb_id'] = requestParameters.imdbId;
                        }
                        if (requestParameters.tmdbId !== undefined) {
                            queryParameters['tmdb_id'] = requestParameters.tmdbId;
                        }
                        if (requestParameters.seriesGranularity !== undefined) {
                            queryParameters['series_granularity'] = requestParameters.seriesGranularity;
                        }
                        if (requestParameters.outputLanguage !== undefined) {
                            queryParameters['output_language'] = requestParameters.outputLanguage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.GetResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get the details of a show via IMDb or TMDb id, including the global streaming availability info.
     * Get by Id
     */
    DefaultApi.prototype.getById = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Query for the leaving movies/series/seasons/episodes in a given list of streaming services. Results are ordered by the last day to watch. Changes listed per page is \"25\" when \"target_type\" is \"show\", \"movie\" or \"series\"; \"50\" when it is \"season\"; and \"100\" when it is \"episode\". Note that upcoming changes for the same show are aggregated together into a single \"upcomingChanges\" array for that show. Which means there might be cases where the count of the items in the result array might be fewer than the maximum upcoming changes listed per page. (i.e. When \"target_type\" is \"season\", there might be 10 items in the result array, but the overall total number of upcoming changes listed across the \"upcomingChanges\" arrays will be still 50, given that there are at least 50 upcoming changes matches with the given query.)
     * Leaving
     */
    DefaultApi.prototype.leavingRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.country === null || requestParameters.country === undefined) {
                            throw new runtime.RequiredError('country', 'Required parameter requestParameters.country was null or undefined when calling leaving.');
                        }
                        if (requestParameters.services === null || requestParameters.services === undefined) {
                            throw new runtime.RequiredError('services', 'Required parameter requestParameters.services was null or undefined when calling leaving.');
                        }
                        if (requestParameters.targetType === null || requestParameters.targetType === undefined) {
                            throw new runtime.RequiredError('targetType', 'Required parameter requestParameters.targetType was null or undefined when calling leaving.');
                        }
                        queryParameters = {};
                        if (requestParameters.country !== undefined) {
                            queryParameters['country'] = requestParameters.country;
                        }
                        if (requestParameters.services !== undefined) {
                            queryParameters['services'] = requestParameters.services;
                        }
                        if (requestParameters.targetType !== undefined) {
                            queryParameters['target_type'] = requestParameters.targetType;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.outputLanguage !== undefined) {
                            queryParameters['output_language'] = requestParameters.outputLanguage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/leaving",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.UpcomingChangesResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Query for the leaving movies/series/seasons/episodes in a given list of streaming services. Results are ordered by the last day to watch. Changes listed per page is \"25\" when \"target_type\" is \"show\", \"movie\" or \"series\"; \"50\" when it is \"season\"; and \"100\" when it is \"episode\". Note that upcoming changes for the same show are aggregated together into a single \"upcomingChanges\" array for that show. Which means there might be cases where the count of the items in the result array might be fewer than the maximum upcoming changes listed per page. (i.e. When \"target_type\" is \"season\", there might be 10 items in the result array, but the overall total number of upcoming changes listed across the \"upcomingChanges\" arrays will be still 50, given that there are at least 50 upcoming changes matches with the given query.)
     * Leaving
     */
    DefaultApi.prototype.leaving = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.leavingRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Search through the catalog of the given streaming services in the given country. Provides filters such as show language, genre, keyword and release year. Items per page is \"25\". Can pass up to \"16\" services in the \"services\" parameter Output includes all the information about the shows, such as title, IMDb ID, TMDb ID, release year, link to shows\' pages in streaming services (including individual season/episode links), available subtitles, audios, available video quality and many more! Apart from the info about the given country-service combinations, output also includes information about streaming availability in the other services for the given country.
     * Search by Filters
     */
    DefaultApi.prototype.searchByFiltersRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.country === null || requestParameters.country === undefined) {
                            throw new runtime.RequiredError('country', 'Required parameter requestParameters.country was null or undefined when calling searchByFilters.');
                        }
                        if (requestParameters.services === null || requestParameters.services === undefined) {
                            throw new runtime.RequiredError('services', 'Required parameter requestParameters.services was null or undefined when calling searchByFilters.');
                        }
                        queryParameters = {};
                        if (requestParameters.country !== undefined) {
                            queryParameters['country'] = requestParameters.country;
                        }
                        if (requestParameters.services !== undefined) {
                            queryParameters['services'] = requestParameters.services;
                        }
                        if (requestParameters.outputLanguage !== undefined) {
                            queryParameters['output_language'] = requestParameters.outputLanguage;
                        }
                        if (requestParameters.showType !== undefined) {
                            queryParameters['show_type'] = requestParameters.showType;
                        }
                        if (requestParameters.seriesGranularity !== undefined) {
                            queryParameters['series_granularity'] = requestParameters.seriesGranularity;
                        }
                        if (requestParameters.genres !== undefined) {
                            queryParameters['genres'] = requestParameters.genres;
                        }
                        if (requestParameters.genresRelation !== undefined) {
                            queryParameters['genres_relation'] = requestParameters.genresRelation;
                        }
                        if (requestParameters.showOriginalLanguage !== undefined) {
                            queryParameters['show_original_language'] = requestParameters.showOriginalLanguage;
                        }
                        if (requestParameters.yearMin !== undefined) {
                            queryParameters['year_min'] = requestParameters.yearMin;
                        }
                        if (requestParameters.yearMax !== undefined) {
                            queryParameters['year_max'] = requestParameters.yearMax;
                        }
                        if (requestParameters.keyword !== undefined) {
                            queryParameters['keyword'] = requestParameters.keyword;
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        if (requestParameters.desc !== undefined) {
                            queryParameters['desc'] = requestParameters.desc;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/search/filters",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SearchFiltersResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search through the catalog of the given streaming services in the given country. Provides filters such as show language, genre, keyword and release year. Items per page is \"25\". Can pass up to \"16\" services in the \"services\" parameter Output includes all the information about the shows, such as title, IMDb ID, TMDb ID, release year, link to shows\' pages in streaming services (including individual season/episode links), available subtitles, audios, available video quality and many more! Apart from the info about the given country-service combinations, output also includes information about streaming availability in the other services for the given country.
     * Search by Filters
     */
    DefaultApi.prototype.searchByFilters = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchByFiltersRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Search for movies and series by a title. Maximum amount of items returned are \"25\" unless there are more than 25 shows with the exact given title input. In that case all the items have 100% match with the title will be returned. No pagination is supported.
     * Search by Title
     */
    DefaultApi.prototype.searchByTitleRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.title === null || requestParameters.title === undefined) {
                            throw new runtime.RequiredError('title', 'Required parameter requestParameters.title was null or undefined when calling searchByTitle.');
                        }
                        if (requestParameters.country === null || requestParameters.country === undefined) {
                            throw new runtime.RequiredError('country', 'Required parameter requestParameters.country was null or undefined when calling searchByTitle.');
                        }
                        queryParameters = {};
                        if (requestParameters.title !== undefined) {
                            queryParameters['title'] = requestParameters.title;
                        }
                        if (requestParameters.showType !== undefined) {
                            queryParameters['show_type'] = requestParameters.showType;
                        }
                        if (requestParameters.country !== undefined) {
                            queryParameters['country'] = requestParameters.country;
                        }
                        if (requestParameters.seriesGranularity !== undefined) {
                            queryParameters['series_granularity'] = requestParameters.seriesGranularity;
                        }
                        if (requestParameters.outputLanguage !== undefined) {
                            queryParameters['output_language'] = requestParameters.outputLanguage;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/search/title",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SearchTitleResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search for movies and series by a title. Maximum amount of items returned are \"25\" unless there are more than 25 shows with the exact given title input. In that case all the items have 100% match with the title will be returned. No pagination is supported.
     * Search by Title
     */
    DefaultApi.prototype.searchByTitle = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchByTitleRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all the supported streaming services, list of the supported countries for each service and other related details. Note: This endpoint is deprecated. Please use the \"/countries\" endpoint instead.
     * Services
     */
    DefaultApi.prototype.servicesRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-RapidAPI-Key"] = this.configuration.apiKey("X-RapidAPI-Key"); // X-Rapid-API-Key authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/services",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ServicesResponseSchemaFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all the supported streaming services, list of the supported countries for each service and other related details. Note: This endpoint is deprecated. Please use the \"/countries\" endpoint instead.
     * Services
     */
    DefaultApi.prototype.services = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.servicesRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DefaultApi;
}(runtime.BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * @export
 */
exports.ChangesChangeTypeEnum = {
    New: 'new',
    Removed: 'removed',
    Updated: 'updated'
};
/**
 * @export
 */
exports.ChangesTargetTypeEnum = {
    Show: 'show',
    Movie: 'movie',
    Series: 'series',
    Season: 'season',
    Episode: 'episode'
};
/**
 * @export
 */
exports.ChangesOutputLanguageEnum = {
    En: 'en',
    Es: 'es',
    Tr: 'tr',
    Fr: 'fr'
};
/**
 * @export
 */
exports.GetByIdSeriesGranularityEnum = {
    Show: 'show',
    Season: 'season',
    Episode: 'episode'
};
/**
 * @export
 */
exports.GetByIdOutputLanguageEnum = {
    En: 'en',
    Es: 'es',
    Tr: 'tr',
    Fr: 'fr'
};
/**
 * @export
 */
exports.LeavingTargetTypeEnum = {
    Show: 'show',
    Movie: 'movie',
    Series: 'series',
    Season: 'season',
    Episode: 'episode'
};
/**
 * @export
 */
exports.LeavingOutputLanguageEnum = {
    En: 'en',
    Es: 'es',
    Tr: 'tr',
    Fr: 'fr'
};
/**
 * @export
 */
exports.SearchByFiltersOutputLanguageEnum = {
    En: 'en',
    Es: 'es',
    Tr: 'tr',
    Fr: 'fr'
};
/**
 * @export
 */
exports.SearchByFiltersShowTypeEnum = {
    Movie: 'movie',
    Series: 'series',
    All: 'all'
};
/**
 * @export
 */
exports.SearchByFiltersSeriesGranularityEnum = {
    Show: 'show',
    Season: 'season',
    Episode: 'episode'
};
/**
 * @export
 */
exports.SearchByFiltersGenresRelationEnum = {
    And: 'and',
    Or: 'or'
};
/**
 * @export
 */
exports.SearchByFiltersOrderByEnum = {
    OriginalTitle: 'original_title',
    Year: 'year',
    PopularityAlltime: 'popularity_alltime',
    Popularity1year: 'popularity_1year',
    Popularity1month: 'popularity_1month',
    Popularity1week: 'popularity_1week'
};
/**
 * @export
 */
exports.SearchByTitleShowTypeEnum = {
    Movie: 'movie',
    Series: 'series',
    All: 'all'
};
/**
 * @export
 */
exports.SearchByTitleSeriesGranularityEnum = {
    Show: 'show',
    Season: 'season',
    Episode: 'episode'
};
/**
 * @export
 */
exports.SearchByTitleOutputLanguageEnum = {
    En: 'en',
    Es: 'es',
    Tr: 'tr',
    Fr: 'fr'
};

},{"../models/index":33,"../runtime":34}],2:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/* eslint-disable */
__exportStar(require("./DefaultApi"), exports);

},{"./DefaultApi":1}],3:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/* eslint-disable */
__exportStar(require("./runtime"), exports);
__exportStar(require("./apis/index"), exports);
__exportStar(require("./models/index"), exports);

},{"./apis/index":2,"./models/index":33,"./runtime":34}],4:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddonToJSON = exports.AddonFromJSONTyped = exports.AddonFromJSON = exports.instanceOfAddon = void 0;
var ImageSet_1 = require("./ImageSet");
/**
 * Check if a given object implements the Addon interface.
 */
function instanceOfAddon(value) {
    var isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "homePage" in value;
    isInstance = isInstance && "themeColorCode" in value;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "images" in value;
    return isInstance;
}
exports.instanceOfAddon = instanceOfAddon;
function AddonFromJSON(json) {
    return AddonFromJSONTyped(json, false);
}
exports.AddonFromJSON = AddonFromJSON;
function AddonFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'displayName': json['displayName'],
        'homePage': json['homePage'],
        'themeColorCode': json['themeColorCode'],
        'image': json['image'],
        'images': (0, ImageSet_1.ImageSetFromJSON)(json['images']),
    };
}
exports.AddonFromJSONTyped = AddonFromJSONTyped;
function AddonToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'displayName': value.displayName,
        'homePage': value.homePage,
        'themeColorCode': value.themeColorCode,
        'image': value.image,
        'images': (0, ImageSet_1.ImageSetToJSON)(value.images),
    };
}
exports.AddonToJSON = AddonToJSON;

},{"./ImageSet":15}],5:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeToJSON = exports.ChangeFromJSONTyped = exports.ChangeFromJSON = exports.instanceOfChange = void 0;
var runtime_1 = require("../runtime");
var StreamingType_1 = require("./StreamingType");
/**
 * Check if a given object implements the Change interface.
 */
function instanceOfChange(value) {
    var isInstance = true;
    isInstance = isInstance && "service" in value;
    isInstance = isInstance && "streamingType" in value;
    isInstance = isInstance && "time" in value;
    return isInstance;
}
exports.instanceOfChange = instanceOfChange;
function ChangeFromJSON(json) {
    return ChangeFromJSONTyped(json, false);
}
exports.ChangeFromJSON = ChangeFromJSON;
function ChangeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'season': !(0, runtime_1.exists)(json, 'season') ? undefined : json['season'],
        'episode': !(0, runtime_1.exists)(json, 'episode') ? undefined : json['episode'],
        'service': json['service'],
        'streamingType': (0, StreamingType_1.StreamingTypeFromJSON)(json['streamingType']),
        'addon': !(0, runtime_1.exists)(json, 'addon') ? undefined : json['addon'],
        'time': json['time'],
    };
}
exports.ChangeFromJSONTyped = ChangeFromJSONTyped;
function ChangeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'season': value.season,
        'episode': value.episode,
        'service': value.service,
        'streamingType': (0, StreamingType_1.StreamingTypeToJSON)(value.streamingType),
        'addon': value.addon,
        'time': value.time,
    };
}
exports.ChangeToJSON = ChangeToJSON;

},{"../runtime":34,"./StreamingType":28}],6:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeSetToJSON = exports.ChangeSetFromJSONTyped = exports.ChangeSetFromJSON = exports.instanceOfChangeSet = void 0;
var Change_1 = require("./Change");
var Show_1 = require("./Show");
/**
 * Check if a given object implements the ChangeSet interface.
 */
function instanceOfChangeSet(value) {
    var isInstance = true;
    isInstance = isInstance && "changes" in value;
    isInstance = isInstance && "show" in value;
    return isInstance;
}
exports.instanceOfChangeSet = instanceOfChangeSet;
function ChangeSetFromJSON(json) {
    return ChangeSetFromJSONTyped(json, false);
}
exports.ChangeSetFromJSON = ChangeSetFromJSON;
function ChangeSetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'changes': (json['changes'].map(Change_1.ChangeFromJSON)),
        'show': (0, Show_1.ShowFromJSON)(json['show']),
    };
}
exports.ChangeSetFromJSONTyped = ChangeSetFromJSONTyped;
function ChangeSetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'changes': (value.changes.map(Change_1.ChangeToJSON)),
        'show': (0, Show_1.ShowToJSON)(value.show),
    };
}
exports.ChangeSetToJSON = ChangeSetToJSON;

},{"./Change":5,"./Show":26}],7:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangesResponseSchemaToJSON = exports.ChangesResponseSchemaFromJSONTyped = exports.ChangesResponseSchemaFromJSON = exports.instanceOfChangesResponseSchema = void 0;
var ChangeSet_1 = require("./ChangeSet");
/**
 * Check if a given object implements the ChangesResponseSchema interface.
 */
function instanceOfChangesResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "hasMore" in value;
    isInstance = isInstance && "nextCursor" in value;
    return isInstance;
}
exports.instanceOfChangesResponseSchema = instanceOfChangesResponseSchema;
function ChangesResponseSchemaFromJSON(json) {
    return ChangesResponseSchemaFromJSONTyped(json, false);
}
exports.ChangesResponseSchemaFromJSON = ChangesResponseSchemaFromJSON;
function ChangesResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': (json['result'].map(ChangeSet_1.ChangeSetFromJSON)),
        'hasMore': json['hasMore'],
        'nextCursor': json['nextCursor'],
    };
}
exports.ChangesResponseSchemaFromJSONTyped = ChangesResponseSchemaFromJSONTyped;
function ChangesResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': (value.result.map(ChangeSet_1.ChangeSetToJSON)),
        'hasMore': value.hasMore,
        'nextCursor': value.nextCursor,
    };
}
exports.ChangesResponseSchemaToJSON = ChangesResponseSchemaToJSON;

},{"./ChangeSet":6}],8:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountriesResponseSchemaToJSON = exports.CountriesResponseSchemaFromJSONTyped = exports.CountriesResponseSchemaFromJSON = exports.instanceOfCountriesResponseSchema = void 0;
var runtime_1 = require("../runtime");
var Country_1 = require("./Country");
/**
 * Check if a given object implements the CountriesResponseSchema interface.
 */
function instanceOfCountriesResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    return isInstance;
}
exports.instanceOfCountriesResponseSchema = instanceOfCountriesResponseSchema;
function CountriesResponseSchemaFromJSON(json) {
    return CountriesResponseSchemaFromJSONTyped(json, false);
}
exports.CountriesResponseSchemaFromJSON = CountriesResponseSchemaFromJSON;
function CountriesResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': ((0, runtime_1.mapValues)(json['result'], Country_1.CountryFromJSON)),
    };
}
exports.CountriesResponseSchemaFromJSONTyped = CountriesResponseSchemaFromJSONTyped;
function CountriesResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': ((0, runtime_1.mapValues)(value.result, Country_1.CountryToJSON)),
    };
}
exports.CountriesResponseSchemaToJSON = CountriesResponseSchemaToJSON;

},{"../runtime":34,"./Country":9}],9:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryToJSON = exports.CountryFromJSONTyped = exports.CountryFromJSON = exports.instanceOfCountry = void 0;
var runtime_1 = require("../runtime");
var Service_1 = require("./Service");
/**
 * Check if a given object implements the Country interface.
 */
function instanceOfCountry(value) {
    var isInstance = true;
    isInstance = isInstance && "countryCode" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "services" in value;
    return isInstance;
}
exports.instanceOfCountry = instanceOfCountry;
function CountryFromJSON(json) {
    return CountryFromJSONTyped(json, false);
}
exports.CountryFromJSON = CountryFromJSON;
function CountryFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'countryCode': json['countryCode'],
        'name': json['name'],
        'services': ((0, runtime_1.mapValues)(json['services'], Service_1.ServiceFromJSON)),
    };
}
exports.CountryFromJSONTyped = CountryFromJSONTyped;
function CountryToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'countryCode': value.countryCode,
        'name': value.name,
        'services': ((0, runtime_1.mapValues)(value.services, Service_1.ServiceToJSON)),
    };
}
exports.CountryToJSON = CountryToJSON;

},{"../runtime":34,"./Service":23}],10:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeprecatedServiceInfoToJSON = exports.DeprecatedServiceInfoFromJSONTyped = exports.DeprecatedServiceInfoFromJSON = exports.instanceOfDeprecatedServiceInfo = void 0;
var runtime_1 = require("../runtime");
var ServiceCountryInfo_1 = require("./ServiceCountryInfo");
/**
 * Check if a given object implements the DeprecatedServiceInfo interface.
 */
function instanceOfDeprecatedServiceInfo(value) {
    var isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "countries" in value;
    return isInstance;
}
exports.instanceOfDeprecatedServiceInfo = instanceOfDeprecatedServiceInfo;
function DeprecatedServiceInfoFromJSON(json) {
    return DeprecatedServiceInfoFromJSONTyped(json, false);
}
exports.DeprecatedServiceInfoFromJSON = DeprecatedServiceInfoFromJSON;
function DeprecatedServiceInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'countries': ((0, runtime_1.mapValues)(json['countries'], ServiceCountryInfo_1.ServiceCountryInfoFromJSON)),
    };
}
exports.DeprecatedServiceInfoFromJSONTyped = DeprecatedServiceInfoFromJSONTyped;
function DeprecatedServiceInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'countries': ((0, runtime_1.mapValues)(value.countries, ServiceCountryInfo_1.ServiceCountryInfoToJSON)),
    };
}
exports.DeprecatedServiceInfoToJSON = DeprecatedServiceInfoToJSON;

},{"../runtime":34,"./ServiceCountryInfo":24}],11:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpisodeToJSON = exports.EpisodeFromJSONTyped = exports.EpisodeFromJSON = exports.instanceOfEpisode = exports.EpisodeTypeEnum = void 0;
/**
 * @export
 */
exports.EpisodeTypeEnum = {
    Episode: 'episode'
};
/**
 * Check if a given object implements the Episode interface.
 */
function instanceOfEpisode(value) {
    var isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "year" in value;
    isInstance = isInstance && "streamingInfo" in value;
    return isInstance;
}
exports.instanceOfEpisode = instanceOfEpisode;
function EpisodeFromJSON(json) {
    return EpisodeFromJSONTyped(json, false);
}
exports.EpisodeFromJSON = EpisodeFromJSON;
function EpisodeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'title': json['title'],
        'year': json['year'],
        'streamingInfo': json['streamingInfo'],
    };
}
exports.EpisodeFromJSONTyped = EpisodeFromJSONTyped;
function EpisodeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'title': value.title,
        'year': value.year,
        'streamingInfo': value.streamingInfo,
    };
}
exports.EpisodeToJSON = EpisodeToJSON;

},{}],12:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenreToJSON = exports.GenreFromJSONTyped = exports.GenreFromJSON = exports.instanceOfGenre = void 0;
/**
 * Check if a given object implements the Genre interface.
 */
function instanceOfGenre(value) {
    var isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    return isInstance;
}
exports.instanceOfGenre = instanceOfGenre;
function GenreFromJSON(json) {
    return GenreFromJSONTyped(json, false);
}
exports.GenreFromJSON = GenreFromJSON;
function GenreFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
    };
}
exports.GenreFromJSONTyped = GenreFromJSONTyped;
function GenreToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'name': value.name,
    };
}
exports.GenreToJSON = GenreToJSON;

},{}],13:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenresResponseSchemaToJSON = exports.GenresResponseSchemaFromJSONTyped = exports.GenresResponseSchemaFromJSON = exports.instanceOfGenresResponseSchema = void 0;
/**
 * Check if a given object implements the GenresResponseSchema interface.
 */
function instanceOfGenresResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    return isInstance;
}
exports.instanceOfGenresResponseSchema = instanceOfGenresResponseSchema;
function GenresResponseSchemaFromJSON(json) {
    return GenresResponseSchemaFromJSONTyped(json, false);
}
exports.GenresResponseSchemaFromJSON = GenresResponseSchemaFromJSON;
function GenresResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': json['result'],
    };
}
exports.GenresResponseSchemaFromJSONTyped = GenresResponseSchemaFromJSONTyped;
function GenresResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': value.result,
    };
}
exports.GenresResponseSchemaToJSON = GenresResponseSchemaToJSON;

},{}],14:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetResponseSchemaToJSON = exports.GetResponseSchemaFromJSONTyped = exports.GetResponseSchemaFromJSON = exports.instanceOfGetResponseSchema = void 0;
var Show_1 = require("./Show");
/**
 * Check if a given object implements the GetResponseSchema interface.
 */
function instanceOfGetResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    return isInstance;
}
exports.instanceOfGetResponseSchema = instanceOfGetResponseSchema;
function GetResponseSchemaFromJSON(json) {
    return GetResponseSchemaFromJSONTyped(json, false);
}
exports.GetResponseSchemaFromJSON = GetResponseSchemaFromJSON;
function GetResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': (0, Show_1.ShowFromJSON)(json['result']),
    };
}
exports.GetResponseSchemaFromJSONTyped = GetResponseSchemaFromJSONTyped;
function GetResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': (0, Show_1.ShowToJSON)(value.result),
    };
}
exports.GetResponseSchemaToJSON = GetResponseSchemaToJSON;

},{"./Show":26}],15:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageSetToJSON = exports.ImageSetFromJSONTyped = exports.ImageSetFromJSON = exports.instanceOfImageSet = void 0;
/**
 * Check if a given object implements the ImageSet interface.
 */
function instanceOfImageSet(value) {
    var isInstance = true;
    isInstance = isInstance && "lightThemeImage" in value;
    isInstance = isInstance && "darkThemeImage" in value;
    isInstance = isInstance && "whiteImage" in value;
    return isInstance;
}
exports.instanceOfImageSet = instanceOfImageSet;
function ImageSetFromJSON(json) {
    return ImageSetFromJSONTyped(json, false);
}
exports.ImageSetFromJSON = ImageSetFromJSON;
function ImageSetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'lightThemeImage': json['lightThemeImage'],
        'darkThemeImage': json['darkThemeImage'],
        'whiteImage': json['whiteImage'],
    };
}
exports.ImageSetFromJSONTyped = ImageSetFromJSONTyped;
function ImageSetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'lightThemeImage': value.lightThemeImage,
        'darkThemeImage': value.darkThemeImage,
        'whiteImage': value.whiteImage,
    };
}
exports.ImageSetToJSON = ImageSetToJSON;

},{}],16:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocaleToJSON = exports.LocaleFromJSONTyped = exports.LocaleFromJSON = exports.instanceOfLocale = void 0;
/**
 * Check if a given object implements the Locale interface.
 */
function instanceOfLocale(value) {
    var isInstance = true;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "region" in value;
    return isInstance;
}
exports.instanceOfLocale = instanceOfLocale;
function LocaleFromJSON(json) {
    return LocaleFromJSONTyped(json, false);
}
exports.LocaleFromJSON = LocaleFromJSON;
function LocaleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'language': json['language'],
        'region': json['region'],
    };
}
exports.LocaleFromJSONTyped = LocaleFromJSONTyped;
function LocaleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'language': value.language,
        'region': value.region,
    };
}
exports.LocaleToJSON = LocaleToJSON;

},{}],17:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotFoundResponseSchemaToJSON = exports.NotFoundResponseSchemaFromJSONTyped = exports.NotFoundResponseSchemaFromJSON = exports.instanceOfNotFoundResponseSchema = void 0;
/**
 * Check if a given object implements the NotFoundResponseSchema interface.
 */
function instanceOfNotFoundResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "message" in value;
    return isInstance;
}
exports.instanceOfNotFoundResponseSchema = instanceOfNotFoundResponseSchema;
function NotFoundResponseSchemaFromJSON(json) {
    return NotFoundResponseSchemaFromJSONTyped(json, false);
}
exports.NotFoundResponseSchemaFromJSON = NotFoundResponseSchemaFromJSON;
function NotFoundResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'message': json['message'],
    };
}
exports.NotFoundResponseSchemaFromJSONTyped = NotFoundResponseSchemaFromJSONTyped;
function NotFoundResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'message': value.message,
    };
}
exports.NotFoundResponseSchemaToJSON = NotFoundResponseSchemaToJSON;

},{}],18:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceToJSON = exports.PriceFromJSONTyped = exports.PriceFromJSON = exports.instanceOfPrice = void 0;
/**
 * Check if a given object implements the Price interface.
 */
function instanceOfPrice(value) {
    var isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "formatted" in value;
    return isInstance;
}
exports.instanceOfPrice = instanceOfPrice;
function PriceFromJSON(json) {
    return PriceFromJSONTyped(json, false);
}
exports.PriceFromJSON = PriceFromJSON;
function PriceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': json['amount'],
        'currency': json['currency'],
        'formatted': json['formatted'],
    };
}
exports.PriceFromJSONTyped = PriceFromJSONTyped;
function PriceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': value.amount,
        'currency': value.currency,
        'formatted': value.formatted,
    };
}
exports.PriceToJSON = PriceToJSON;

},{}],19:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchFiltersResponseSchemaToJSON = exports.SearchFiltersResponseSchemaFromJSONTyped = exports.SearchFiltersResponseSchemaFromJSON = exports.instanceOfSearchFiltersResponseSchema = void 0;
var Show_1 = require("./Show");
/**
 * Check if a given object implements the SearchFiltersResponseSchema interface.
 */
function instanceOfSearchFiltersResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "hasMore" in value;
    isInstance = isInstance && "nextCursor" in value;
    return isInstance;
}
exports.instanceOfSearchFiltersResponseSchema = instanceOfSearchFiltersResponseSchema;
function SearchFiltersResponseSchemaFromJSON(json) {
    return SearchFiltersResponseSchemaFromJSONTyped(json, false);
}
exports.SearchFiltersResponseSchemaFromJSON = SearchFiltersResponseSchemaFromJSON;
function SearchFiltersResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': (json['result'].map(Show_1.ShowFromJSON)),
        'hasMore': json['hasMore'],
        'nextCursor': json['nextCursor'],
    };
}
exports.SearchFiltersResponseSchemaFromJSONTyped = SearchFiltersResponseSchemaFromJSONTyped;
function SearchFiltersResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': (value.result.map(Show_1.ShowToJSON)),
        'hasMore': value.hasMore,
        'nextCursor': value.nextCursor,
    };
}
exports.SearchFiltersResponseSchemaToJSON = SearchFiltersResponseSchemaToJSON;

},{"./Show":26}],20:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchTitleResponseSchemaToJSON = exports.SearchTitleResponseSchemaFromJSONTyped = exports.SearchTitleResponseSchemaFromJSON = exports.instanceOfSearchTitleResponseSchema = void 0;
var Show_1 = require("./Show");
/**
 * Check if a given object implements the SearchTitleResponseSchema interface.
 */
function instanceOfSearchTitleResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    return isInstance;
}
exports.instanceOfSearchTitleResponseSchema = instanceOfSearchTitleResponseSchema;
function SearchTitleResponseSchemaFromJSON(json) {
    return SearchTitleResponseSchemaFromJSONTyped(json, false);
}
exports.SearchTitleResponseSchemaFromJSON = SearchTitleResponseSchemaFromJSON;
function SearchTitleResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': (json['result'].map(Show_1.ShowFromJSON)),
    };
}
exports.SearchTitleResponseSchemaFromJSONTyped = SearchTitleResponseSchemaFromJSONTyped;
function SearchTitleResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': (value.result.map(Show_1.ShowToJSON)),
    };
}
exports.SearchTitleResponseSchemaToJSON = SearchTitleResponseSchemaToJSON;

},{"./Show":26}],21:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeasonToJSON = exports.SeasonFromJSONTyped = exports.SeasonFromJSON = exports.instanceOfSeason = exports.SeasonTypeEnum = void 0;
var Episode_1 = require("./Episode");
/**
 * @export
 */
exports.SeasonTypeEnum = {
    Season: 'season'
};
/**
 * Check if a given object implements the Season interface.
 */
function instanceOfSeason(value) {
    var isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "firstAirYear" in value;
    isInstance = isInstance && "lastAirYear" in value;
    isInstance = isInstance && "streamingInfo" in value;
    isInstance = isInstance && "episodes" in value;
    return isInstance;
}
exports.instanceOfSeason = instanceOfSeason;
function SeasonFromJSON(json) {
    return SeasonFromJSONTyped(json, false);
}
exports.SeasonFromJSON = SeasonFromJSON;
function SeasonFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'title': json['title'],
        'firstAirYear': json['firstAirYear'],
        'lastAirYear': json['lastAirYear'],
        'streamingInfo': json['streamingInfo'],
        'episodes': (json['episodes'].map(Episode_1.EpisodeFromJSON)),
    };
}
exports.SeasonFromJSONTyped = SeasonFromJSONTyped;
function SeasonToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'title': value.title,
        'firstAirYear': value.firstAirYear,
        'lastAirYear': value.lastAirYear,
        'streamingInfo': value.streamingInfo,
        'episodes': (value.episodes.map(Episode_1.EpisodeToJSON)),
    };
}
exports.SeasonToJSON = SeasonToJSON;

},{"./Episode":11}],22:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeriesStatusToJSON = exports.SeriesStatusFromJSONTyped = exports.SeriesStatusFromJSON = exports.instanceOfSeriesStatus = exports.SeriesStatusStatusTextEnum = void 0;
/**
 * @export
 */
exports.SeriesStatusStatusTextEnum = {
    ReturningSeries: 'Returning Series',
    Planned: 'Planned',
    InProduction: 'In Production',
    Ended: 'Ended',
    Cancelled: 'Cancelled',
    Pilot: 'Pilot'
};
/**
 * Check if a given object implements the SeriesStatus interface.
 */
function instanceOfSeriesStatus(value) {
    var isInstance = true;
    isInstance = isInstance && "statusCode" in value;
    isInstance = isInstance && "statusText" in value;
    return isInstance;
}
exports.instanceOfSeriesStatus = instanceOfSeriesStatus;
function SeriesStatusFromJSON(json) {
    return SeriesStatusFromJSONTyped(json, false);
}
exports.SeriesStatusFromJSON = SeriesStatusFromJSON;
function SeriesStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'statusCode': json['statusCode'],
        'statusText': json['statusText'],
    };
}
exports.SeriesStatusFromJSONTyped = SeriesStatusFromJSONTyped;
function SeriesStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'statusCode': value.statusCode,
        'statusText': value.statusText,
    };
}
exports.SeriesStatusToJSON = SeriesStatusToJSON;

},{}],23:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceToJSON = exports.ServiceFromJSONTyped = exports.ServiceFromJSON = exports.instanceOfService = void 0;
var runtime_1 = require("../runtime");
var Addon_1 = require("./Addon");
var ImageSet_1 = require("./ImageSet");
var SupportedStreamingTypes_1 = require("./SupportedStreamingTypes");
/**
 * Check if a given object implements the Service interface.
 */
function instanceOfService(value) {
    var isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "homePage" in value;
    isInstance = isInstance && "themeColorCode" in value;
    isInstance = isInstance && "images" in value;
    isInstance = isInstance && "supportedStreamingTypes" in value;
    isInstance = isInstance && "addons" in value;
    return isInstance;
}
exports.instanceOfService = instanceOfService;
function ServiceFromJSON(json) {
    return ServiceFromJSONTyped(json, false);
}
exports.ServiceFromJSON = ServiceFromJSON;
function ServiceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
        'homePage': json['homePage'],
        'themeColorCode': json['themeColorCode'],
        'images': (0, ImageSet_1.ImageSetFromJSON)(json['images']),
        'supportedStreamingTypes': (0, SupportedStreamingTypes_1.SupportedStreamingTypesFromJSON)(json['supportedStreamingTypes']),
        'addons': ((0, runtime_1.mapValues)(json['addons'], Addon_1.AddonFromJSON)),
    };
}
exports.ServiceFromJSONTyped = ServiceFromJSONTyped;
function ServiceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'name': value.name,
        'homePage': value.homePage,
        'themeColorCode': value.themeColorCode,
        'images': (0, ImageSet_1.ImageSetToJSON)(value.images),
        'supportedStreamingTypes': (0, SupportedStreamingTypes_1.SupportedStreamingTypesToJSON)(value.supportedStreamingTypes),
        'addons': ((0, runtime_1.mapValues)(value.addons, Addon_1.AddonToJSON)),
    };
}
exports.ServiceToJSON = ServiceToJSON;

},{"../runtime":34,"./Addon":4,"./ImageSet":15,"./SupportedStreamingTypes":30}],24:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceCountryInfoToJSON = exports.ServiceCountryInfoFromJSONTyped = exports.ServiceCountryInfoFromJSON = exports.instanceOfServiceCountryInfo = void 0;
var runtime_1 = require("../runtime");
var Addon_1 = require("./Addon");
var SupportedStreamingTypes_1 = require("./SupportedStreamingTypes");
/**
 * Check if a given object implements the ServiceCountryInfo interface.
 */
function instanceOfServiceCountryInfo(value) {
    var isInstance = true;
    isInstance = isInstance && "supportedStreamingTypes" in value;
    isInstance = isInstance && "addons" in value;
    return isInstance;
}
exports.instanceOfServiceCountryInfo = instanceOfServiceCountryInfo;
function ServiceCountryInfoFromJSON(json) {
    return ServiceCountryInfoFromJSONTyped(json, false);
}
exports.ServiceCountryInfoFromJSON = ServiceCountryInfoFromJSON;
function ServiceCountryInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'supportedStreamingTypes': (0, SupportedStreamingTypes_1.SupportedStreamingTypesFromJSON)(json['supportedStreamingTypes']),
        'addons': ((0, runtime_1.mapValues)(json['addons'], Addon_1.AddonFromJSON)),
    };
}
exports.ServiceCountryInfoFromJSONTyped = ServiceCountryInfoFromJSONTyped;
function ServiceCountryInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'supportedStreamingTypes': (0, SupportedStreamingTypes_1.SupportedStreamingTypesToJSON)(value.supportedStreamingTypes),
        'addons': ((0, runtime_1.mapValues)(value.addons, Addon_1.AddonToJSON)),
    };
}
exports.ServiceCountryInfoToJSON = ServiceCountryInfoToJSON;

},{"../runtime":34,"./Addon":4,"./SupportedStreamingTypes":30}],25:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicesResponseSchemaToJSON = exports.ServicesResponseSchemaFromJSONTyped = exports.ServicesResponseSchemaFromJSON = exports.instanceOfServicesResponseSchema = void 0;
var runtime_1 = require("../runtime");
var DeprecatedServiceInfo_1 = require("./DeprecatedServiceInfo");
/**
 * Check if a given object implements the ServicesResponseSchema interface.
 */
function instanceOfServicesResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    return isInstance;
}
exports.instanceOfServicesResponseSchema = instanceOfServicesResponseSchema;
function ServicesResponseSchemaFromJSON(json) {
    return ServicesResponseSchemaFromJSONTyped(json, false);
}
exports.ServicesResponseSchemaFromJSON = ServicesResponseSchemaFromJSON;
function ServicesResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': ((0, runtime_1.mapValues)(json['result'], DeprecatedServiceInfo_1.DeprecatedServiceInfoFromJSON)),
    };
}
exports.ServicesResponseSchemaFromJSONTyped = ServicesResponseSchemaFromJSONTyped;
function ServicesResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': ((0, runtime_1.mapValues)(value.result, DeprecatedServiceInfo_1.DeprecatedServiceInfoToJSON)),
    };
}
exports.ServicesResponseSchemaToJSON = ServicesResponseSchemaToJSON;

},{"../runtime":34,"./DeprecatedServiceInfo":10}],26:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowToJSON = exports.ShowFromJSONTyped = exports.ShowFromJSON = exports.instanceOfShow = exports.ShowTypeEnum = void 0;
var runtime_1 = require("../runtime");
var Genre_1 = require("./Genre");
var Season_1 = require("./Season");
var SeriesStatus_1 = require("./SeriesStatus");
/**
 * @export
 */
exports.ShowTypeEnum = {
    Movie: 'movie',
    Series: 'series'
};
/**
 * Check if a given object implements the Show interface.
 */
function instanceOfShow(value) {
    var isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "overview" in value;
    isInstance = isInstance && "imdbId" in value;
    isInstance = isInstance && "tmdbId" in value;
    isInstance = isInstance && "originalTitle" in value;
    isInstance = isInstance && "genres" in value;
    isInstance = isInstance && "cast" in value;
    isInstance = isInstance && "streamingInfo" in value;
    return isInstance;
}
exports.instanceOfShow = instanceOfShow;
function ShowFromJSON(json) {
    return ShowFromJSONTyped(json, false);
}
exports.ShowFromJSON = ShowFromJSON;
function ShowFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'title': json['title'],
        'overview': json['overview'],
        'year': !(0, runtime_1.exists)(json, 'year') ? undefined : json['year'],
        'firstAirYear': !(0, runtime_1.exists)(json, 'firstAirYear') ? undefined : json['firstAirYear'],
        'lastAirYear': !(0, runtime_1.exists)(json, 'lastAirYear') ? undefined : json['lastAirYear'],
        'imdbId': json['imdbId'],
        'tmdbId': json['tmdbId'],
        'originalTitle': json['originalTitle'],
        'genres': (json['genres'].map(Genre_1.GenreFromJSON)),
        'directors': !(0, runtime_1.exists)(json, 'directors') ? undefined : json['directors'],
        'creators': !(0, runtime_1.exists)(json, 'creators') ? undefined : json['creators'],
        'cast': json['cast'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, SeriesStatus_1.SeriesStatusFromJSON)(json['status']),
        'seasonCount': !(0, runtime_1.exists)(json, 'seasonCount') ? undefined : json['seasonCount'],
        'episodeCount': !(0, runtime_1.exists)(json, 'episodeCount') ? undefined : json['episodeCount'],
        'streamingInfo': json['streamingInfo'],
        'seasons': !(0, runtime_1.exists)(json, 'seasons') ? undefined : (json['seasons'].map(Season_1.SeasonFromJSON)),
    };
}
exports.ShowFromJSONTyped = ShowFromJSONTyped;
function ShowToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'title': value.title,
        'overview': value.overview,
        'year': value.year,
        'firstAirYear': value.firstAirYear,
        'lastAirYear': value.lastAirYear,
        'imdbId': value.imdbId,
        'tmdbId': value.tmdbId,
        'originalTitle': value.originalTitle,
        'genres': (value.genres.map(Genre_1.GenreToJSON)),
        'directors': value.directors,
        'creators': value.creators,
        'cast': value.cast,
        'status': (0, SeriesStatus_1.SeriesStatusToJSON)(value.status),
        'seasonCount': value.seasonCount,
        'episodeCount': value.episodeCount,
        'streamingInfo': value.streamingInfo,
        'seasons': value.seasons === undefined ? undefined : (value.seasons.map(Season_1.SeasonToJSON)),
    };
}
exports.ShowToJSON = ShowToJSON;

},{"../runtime":34,"./Genre":12,"./Season":21,"./SeriesStatus":22}],27:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingOptionToJSON = exports.StreamingOptionFromJSONTyped = exports.StreamingOptionFromJSON = exports.instanceOfStreamingOption = exports.StreamingOptionQualityEnum = void 0;
var runtime_1 = require("../runtime");
var Locale_1 = require("./Locale");
var Price_1 = require("./Price");
var StreamingType_1 = require("./StreamingType");
var Subtitle_1 = require("./Subtitle");
/**
 * @export
 */
exports.StreamingOptionQualityEnum = {
    Sd: 'sd',
    Hd: 'hd',
    Qhd: 'qhd',
    Uhd: 'uhd'
};
/**
 * Check if a given object implements the StreamingOption interface.
 */
function instanceOfStreamingOption(value) {
    var isInstance = true;
    isInstance = isInstance && "service" in value;
    isInstance = isInstance && "streamingType" in value;
    isInstance = isInstance && "link" in value;
    isInstance = isInstance && "audios" in value;
    isInstance = isInstance && "subtitles" in value;
    isInstance = isInstance && "availableSince" in value;
    return isInstance;
}
exports.instanceOfStreamingOption = instanceOfStreamingOption;
function StreamingOptionFromJSON(json) {
    return StreamingOptionFromJSONTyped(json, false);
}
exports.StreamingOptionFromJSON = StreamingOptionFromJSON;
function StreamingOptionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'service': json['service'],
        'streamingType': (0, StreamingType_1.StreamingTypeFromJSON)(json['streamingType']),
        'addon': !(0, runtime_1.exists)(json, 'addon') ? undefined : json['addon'],
        'link': json['link'],
        'videoLink': !(0, runtime_1.exists)(json, 'videoLink') ? undefined : json['videoLink'],
        'quality': !(0, runtime_1.exists)(json, 'quality') ? undefined : json['quality'],
        'audios': (json['audios'].map(Locale_1.LocaleFromJSON)),
        'subtitles': (json['subtitles'].map(Subtitle_1.SubtitleFromJSON)),
        'price': !(0, runtime_1.exists)(json, 'price') ? undefined : (0, Price_1.PriceFromJSON)(json['price']),
        'leaving': !(0, runtime_1.exists)(json, 'leaving') ? undefined : json['leaving'],
        'availableSince': json['availableSince'],
    };
}
exports.StreamingOptionFromJSONTyped = StreamingOptionFromJSONTyped;
function StreamingOptionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'service': value.service,
        'streamingType': (0, StreamingType_1.StreamingTypeToJSON)(value.streamingType),
        'addon': value.addon,
        'link': value.link,
        'videoLink': value.videoLink,
        'quality': value.quality,
        'audios': (value.audios.map(Locale_1.LocaleToJSON)),
        'subtitles': (value.subtitles.map(Subtitle_1.SubtitleToJSON)),
        'price': (0, Price_1.PriceToJSON)(value.price),
        'leaving': value.leaving,
        'availableSince': value.availableSince,
    };
}
exports.StreamingOptionToJSON = StreamingOptionToJSON;

},{"../runtime":34,"./Locale":16,"./Price":18,"./StreamingType":28,"./Subtitle":29}],28:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingTypeToJSON = exports.StreamingTypeFromJSONTyped = exports.StreamingTypeFromJSON = exports.StreamingType = void 0;
/**
 * Type of the streaming option.
 * @export
 */
exports.StreamingType = {
    Free: 'free',
    Subscription: 'subscription',
    Buy: 'buy',
    Rent: 'rent',
    Addon: 'addon'
};
function StreamingTypeFromJSON(json) {
    return StreamingTypeFromJSONTyped(json, false);
}
exports.StreamingTypeFromJSON = StreamingTypeFromJSON;
function StreamingTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
exports.StreamingTypeFromJSONTyped = StreamingTypeFromJSONTyped;
function StreamingTypeToJSON(value) {
    return value;
}
exports.StreamingTypeToJSON = StreamingTypeToJSON;

},{}],29:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubtitleToJSON = exports.SubtitleFromJSONTyped = exports.SubtitleFromJSON = exports.instanceOfSubtitle = void 0;
var runtime_1 = require("../runtime");
var Locale_1 = require("./Locale");
/**
 * Check if a given object implements the Subtitle interface.
 */
function instanceOfSubtitle(value) {
    var isInstance = true;
    return isInstance;
}
exports.instanceOfSubtitle = instanceOfSubtitle;
function SubtitleFromJSON(json) {
    return SubtitleFromJSONTyped(json, false);
}
exports.SubtitleFromJSON = SubtitleFromJSON;
function SubtitleFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'closedCaptions': !(0, runtime_1.exists)(json, 'closedCaptions') ? undefined : json['closedCaptions'],
        'locale': !(0, runtime_1.exists)(json, 'locale') ? undefined : (0, Locale_1.LocaleFromJSON)(json['locale']),
    };
}
exports.SubtitleFromJSONTyped = SubtitleFromJSONTyped;
function SubtitleToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'closedCaptions': value.closedCaptions,
        'locale': (0, Locale_1.LocaleToJSON)(value.locale),
    };
}
exports.SubtitleToJSON = SubtitleToJSON;

},{"../runtime":34,"./Locale":16}],30:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportedStreamingTypesToJSON = exports.SupportedStreamingTypesFromJSONTyped = exports.SupportedStreamingTypesFromJSON = exports.instanceOfSupportedStreamingTypes = void 0;
/**
 * Check if a given object implements the SupportedStreamingTypes interface.
 */
function instanceOfSupportedStreamingTypes(value) {
    var isInstance = true;
    isInstance = isInstance && "addon" in value;
    isInstance = isInstance && "buy" in value;
    isInstance = isInstance && "rent" in value;
    isInstance = isInstance && "free" in value;
    isInstance = isInstance && "subscription" in value;
    return isInstance;
}
exports.instanceOfSupportedStreamingTypes = instanceOfSupportedStreamingTypes;
function SupportedStreamingTypesFromJSON(json) {
    return SupportedStreamingTypesFromJSONTyped(json, false);
}
exports.SupportedStreamingTypesFromJSON = SupportedStreamingTypesFromJSON;
function SupportedStreamingTypesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'addon': json['addon'],
        'buy': json['buy'],
        'rent': json['rent'],
        'free': json['free'],
        'subscription': json['subscription'],
    };
}
exports.SupportedStreamingTypesFromJSONTyped = SupportedStreamingTypesFromJSONTyped;
function SupportedStreamingTypesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'addon': value.addon,
        'buy': value.buy,
        'rent': value.rent,
        'free': value.free,
        'subscription': value.subscription,
    };
}
exports.SupportedStreamingTypesToJSON = SupportedStreamingTypesToJSON;

},{}],31:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpcomingChangeSetToJSON = exports.UpcomingChangeSetFromJSONTyped = exports.UpcomingChangeSetFromJSON = exports.instanceOfUpcomingChangeSet = void 0;
var Change_1 = require("./Change");
var Show_1 = require("./Show");
/**
 * Check if a given object implements the UpcomingChangeSet interface.
 */
function instanceOfUpcomingChangeSet(value) {
    var isInstance = true;
    isInstance = isInstance && "upcomingChanges" in value;
    isInstance = isInstance && "show" in value;
    return isInstance;
}
exports.instanceOfUpcomingChangeSet = instanceOfUpcomingChangeSet;
function UpcomingChangeSetFromJSON(json) {
    return UpcomingChangeSetFromJSONTyped(json, false);
}
exports.UpcomingChangeSetFromJSON = UpcomingChangeSetFromJSON;
function UpcomingChangeSetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'upcomingChanges': (json['upcomingChanges'].map(Change_1.ChangeFromJSON)),
        'show': (0, Show_1.ShowFromJSON)(json['show']),
    };
}
exports.UpcomingChangeSetFromJSONTyped = UpcomingChangeSetFromJSONTyped;
function UpcomingChangeSetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'upcomingChanges': (value.upcomingChanges.map(Change_1.ChangeToJSON)),
        'show': (0, Show_1.ShowToJSON)(value.show),
    };
}
exports.UpcomingChangeSetToJSON = UpcomingChangeSetToJSON;

},{"./Change":5,"./Show":26}],32:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpcomingChangesResponseSchemaToJSON = exports.UpcomingChangesResponseSchemaFromJSONTyped = exports.UpcomingChangesResponseSchemaFromJSON = exports.instanceOfUpcomingChangesResponseSchema = void 0;
var UpcomingChangeSet_1 = require("./UpcomingChangeSet");
/**
 * Check if a given object implements the UpcomingChangesResponseSchema interface.
 */
function instanceOfUpcomingChangesResponseSchema(value) {
    var isInstance = true;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "hasMore" in value;
    isInstance = isInstance && "nextCursor" in value;
    return isInstance;
}
exports.instanceOfUpcomingChangesResponseSchema = instanceOfUpcomingChangesResponseSchema;
function UpcomingChangesResponseSchemaFromJSON(json) {
    return UpcomingChangesResponseSchemaFromJSONTyped(json, false);
}
exports.UpcomingChangesResponseSchemaFromJSON = UpcomingChangesResponseSchemaFromJSON;
function UpcomingChangesResponseSchemaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'result': (json['result'].map(UpcomingChangeSet_1.UpcomingChangeSetFromJSON)),
        'hasMore': json['hasMore'],
        'nextCursor': json['nextCursor'],
    };
}
exports.UpcomingChangesResponseSchemaFromJSONTyped = UpcomingChangesResponseSchemaFromJSONTyped;
function UpcomingChangesResponseSchemaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'result': (value.result.map(UpcomingChangeSet_1.UpcomingChangeSetToJSON)),
        'hasMore': value.hasMore,
        'nextCursor': value.nextCursor,
    };
}
exports.UpcomingChangesResponseSchemaToJSON = UpcomingChangesResponseSchemaToJSON;

},{"./UpcomingChangeSet":31}],33:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/* eslint-disable */
__exportStar(require("./Addon"), exports);
__exportStar(require("./Change"), exports);
__exportStar(require("./ChangeSet"), exports);
__exportStar(require("./ChangesResponseSchema"), exports);
__exportStar(require("./CountriesResponseSchema"), exports);
__exportStar(require("./Country"), exports);
__exportStar(require("./DeprecatedServiceInfo"), exports);
__exportStar(require("./Episode"), exports);
__exportStar(require("./Genre"), exports);
__exportStar(require("./GenresResponseSchema"), exports);
__exportStar(require("./GetResponseSchema"), exports);
__exportStar(require("./ImageSet"), exports);
__exportStar(require("./Locale"), exports);
__exportStar(require("./NotFoundResponseSchema"), exports);
__exportStar(require("./Price"), exports);
__exportStar(require("./SearchFiltersResponseSchema"), exports);
__exportStar(require("./SearchTitleResponseSchema"), exports);
__exportStar(require("./Season"), exports);
__exportStar(require("./SeriesStatus"), exports);
__exportStar(require("./Service"), exports);
__exportStar(require("./ServiceCountryInfo"), exports);
__exportStar(require("./ServicesResponseSchema"), exports);
__exportStar(require("./Show"), exports);
__exportStar(require("./StreamingOption"), exports);
__exportStar(require("./StreamingType"), exports);
__exportStar(require("./Subtitle"), exports);
__exportStar(require("./SupportedStreamingTypes"), exports);
__exportStar(require("./UpcomingChangeSet"), exports);
__exportStar(require("./UpcomingChangesResponseSchema"), exports);

},{"./Addon":4,"./Change":5,"./ChangeSet":6,"./ChangesResponseSchema":7,"./CountriesResponseSchema":8,"./Country":9,"./DeprecatedServiceInfo":10,"./Episode":11,"./Genre":12,"./GenresResponseSchema":13,"./GetResponseSchema":14,"./ImageSet":15,"./Locale":16,"./NotFoundResponseSchema":17,"./Price":18,"./SearchFiltersResponseSchema":19,"./SearchTitleResponseSchema":20,"./Season":21,"./SeriesStatus":22,"./Service":23,"./ServiceCountryInfo":24,"./ServicesResponseSchema":25,"./Show":26,"./StreamingOption":27,"./StreamingType":28,"./Subtitle":29,"./SupportedStreamingTypes":30,"./UpcomingChangeSet":31,"./UpcomingChangesResponseSchema":32}],34:[function(require,module,exports){
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Streaming Availability API
 * Streaming Availability API allows getting streaming availability information of movies and series; and querying the list of available shows on streaming services such as Netflix, Disney+, Apple TV, Max and Hulu across 59 countries!
 *
 * The version of the OpenAPI document: 3.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextApiResponse = exports.BlobApiResponse = exports.VoidApiResponse = exports.JSONApiResponse = exports.canConsumeForm = exports.mapValues = exports.querystring = exports.exists = exports.COLLECTION_FORMATS = exports.RequiredError = exports.FetchError = exports.ResponseError = exports.BaseAPI = exports.DefaultConfig = exports.Configuration = exports.BASE_PATH = void 0;
exports.BASE_PATH = "https://streaming-availability.p.rapidapi.com".replace(/\/+$/, "");
var Configuration = /** @class */ (function () {
    function Configuration(configuration) {
        if (configuration === void 0) { configuration = {}; }
        this.configuration = configuration;
    }
    Object.defineProperty(Configuration.prototype, "config", {
        set: function (configuration) {
            this.configuration = configuration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "basePath", {
        get: function () {
            return this.configuration.basePath != null ? this.configuration.basePath : exports.BASE_PATH;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "fetchApi", {
        get: function () {
            return this.configuration.fetchApi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "middleware", {
        get: function () {
            return this.configuration.middleware || [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "queryParamsStringify", {
        get: function () {
            return this.configuration.queryParamsStringify || querystring;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "username", {
        get: function () {
            return this.configuration.username;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "password", {
        get: function () {
            return this.configuration.password;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "apiKey", {
        get: function () {
            var apiKey = this.configuration.apiKey;
            if (apiKey) {
                return typeof apiKey === 'function' ? apiKey : function () { return apiKey; };
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "accessToken", {
        get: function () {
            var _this = this;
            var accessToken = this.configuration.accessToken;
            if (accessToken) {
                return typeof accessToken === 'function' ? accessToken : function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, accessToken];
                }); }); };
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "headers", {
        get: function () {
            return this.configuration.headers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Configuration.prototype, "credentials", {
        get: function () {
            return this.configuration.credentials;
        },
        enumerable: false,
        configurable: true
    });
    return Configuration;
}());
exports.Configuration = Configuration;
exports.DefaultConfig = new Configuration();
/**
 * This is the base class for all generated API classes.
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration) {
        if (configuration === void 0) { configuration = exports.DefaultConfig; }
        var _this = this;
        this.configuration = configuration;
        this.fetchApi = function (url, init) { return __awaiter(_this, void 0, void 0, function () {
            var fetchParams, _i, _a, middleware, response, e_1, _b, _c, middleware, _d, _e, middleware;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        fetchParams = { url: url, init: init };
                        _i = 0, _a = this.middleware;
                        _f.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        middleware = _a[_i];
                        if (!middleware.pre) return [3 /*break*/, 3];
                        return [4 /*yield*/, middleware.pre(__assign({ fetch: this.fetchApi }, fetchParams))];
                    case 2:
                        fetchParams = (_f.sent()) || fetchParams;
                        _f.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        response = undefined;
                        _f.label = 5;
                    case 5:
                        _f.trys.push([5, 7, , 12]);
                        return [4 /*yield*/, (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init)];
                    case 6:
                        response = _f.sent();
                        return [3 /*break*/, 12];
                    case 7:
                        e_1 = _f.sent();
                        _b = 0, _c = this.middleware;
                        _f.label = 8;
                    case 8:
                        if (!(_b < _c.length)) return [3 /*break*/, 11];
                        middleware = _c[_b];
                        if (!middleware.onError) return [3 /*break*/, 10];
                        return [4 /*yield*/, middleware.onError({
                                fetch: this.fetchApi,
                                url: fetchParams.url,
                                init: fetchParams.init,
                                error: e_1,
                                response: response ? response.clone() : undefined,
                            })];
                    case 9:
                        response = (_f.sent()) || response;
                        _f.label = 10;
                    case 10:
                        _b++;
                        return [3 /*break*/, 8];
                    case 11:
                        if (response === undefined) {
                            if (e_1 instanceof Error) {
                                throw new FetchError(e_1, 'The request failed and the interceptors did not return an alternative response');
                            }
                            else {
                                throw e_1;
                            }
                        }
                        return [3 /*break*/, 12];
                    case 12:
                        _d = 0, _e = this.middleware;
                        _f.label = 13;
                    case 13:
                        if (!(_d < _e.length)) return [3 /*break*/, 16];
                        middleware = _e[_d];
                        if (!middleware.post) return [3 /*break*/, 15];
                        return [4 /*yield*/, middleware.post({
                                fetch: this.fetchApi,
                                url: fetchParams.url,
                                init: fetchParams.init,
                                response: response.clone(),
                            })];
                    case 14:
                        response = (_f.sent()) || response;
                        _f.label = 15;
                    case 15:
                        _d++;
                        return [3 /*break*/, 13];
                    case 16: return [2 /*return*/, response];
                }
            });
        }); };
        this.middleware = configuration.middleware;
    }
    BaseAPI.prototype.withMiddleware = function () {
        var _a;
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        var next = this.clone();
        next.middleware = (_a = next.middleware).concat.apply(_a, middlewares);
        return next;
    };
    BaseAPI.prototype.withPreMiddleware = function () {
        var preMiddlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            preMiddlewares[_i] = arguments[_i];
        }
        var middlewares = preMiddlewares.map(function (pre) { return ({ pre: pre }); });
        return this.withMiddleware.apply(this, middlewares);
    };
    BaseAPI.prototype.withPostMiddleware = function () {
        var postMiddlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            postMiddlewares[_i] = arguments[_i];
        }
        var middlewares = postMiddlewares.map(function (post) { return ({ post: post }); });
        return this.withMiddleware.apply(this, middlewares);
    };
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    BaseAPI.prototype.isJsonMime = function (mime) {
        if (!mime) {
            return false;
        }
        return BaseAPI.jsonRegex.test(mime);
    };
    BaseAPI.prototype.request = function (context, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, url, init, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.createFetchParams(context, initOverrides)];
                    case 1:
                        _a = _b.sent(), url = _a.url, init = _a.init;
                        return [4 /*yield*/, this.fetchApi(url, init)];
                    case 2:
                        response = _b.sent();
                        if (response && (response.status >= 200 && response.status < 300)) {
                            return [2 /*return*/, response];
                        }
                        throw new ResponseError(response, 'Response returned an error code');
                }
            });
        });
    };
    BaseAPI.prototype.createFetchParams = function (context, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var url, headers, initOverrideFn, initParams, overriddenInit, _a, body, init;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.configuration.basePath + context.path;
                        if (context.query !== undefined && Object.keys(context.query).length !== 0) {
                            // only add the querystring to the URL if there are query parameters.
                            // this is done to avoid urls ending with a "?" character which buggy webservers
                            // do not handle correctly sometimes.
                            url += '?' + this.configuration.queryParamsStringify(context.query);
                        }
                        headers = Object.assign({}, this.configuration.headers, context.headers);
                        Object.keys(headers).forEach(function (key) { return headers[key] === undefined ? delete headers[key] : {}; });
                        initOverrideFn = typeof initOverrides === "function"
                            ? initOverrides
                            : function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, initOverrides];
                            }); }); };
                        initParams = {
                            method: context.method,
                            headers: headers,
                            body: context.body,
                            credentials: this.configuration.credentials,
                        };
                        _a = [__assign({}, initParams)];
                        return [4 /*yield*/, initOverrideFn({
                                init: initParams,
                                context: context,
                            })];
                    case 1:
                        overriddenInit = __assign.apply(void 0, _a.concat([(_b.sent())]));
                        if (isFormData(overriddenInit.body)
                            || (overriddenInit.body instanceof URLSearchParams)
                            || isBlob(overriddenInit.body)) {
                            body = overriddenInit.body;
                        }
                        else if (this.isJsonMime(headers['Content-Type'])) {
                            body = JSON.stringify(overriddenInit.body);
                        }
                        else {
                            body = overriddenInit.body;
                        }
                        init = __assign(__assign({}, overriddenInit), { body: body });
                        return [2 /*return*/, { url: url, init: init }];
                }
            });
        });
    };
    /**
     * Create a shallow clone of `this` by constructing a new instance
     * and then shallow cloning data members.
     */
    BaseAPI.prototype.clone = function () {
        var constructor = this.constructor;
        var next = new constructor(this.configuration);
        next.middleware = this.middleware.slice();
        return next;
    };
    BaseAPI.jsonRegex = new RegExp('^(:?application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(:?;.*)?$', 'i');
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
function isBlob(value) {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}
function isFormData(value) {
    return typeof FormData !== "undefined" && value instanceof FormData;
}
var ResponseError = /** @class */ (function (_super) {
    __extends(ResponseError, _super);
    function ResponseError(response, msg) {
        var _this = _super.call(this, msg) || this;
        _this.response = response;
        _this.name = "ResponseError";
        return _this;
    }
    return ResponseError;
}(Error));
exports.ResponseError = ResponseError;
var FetchError = /** @class */ (function (_super) {
    __extends(FetchError, _super);
    function FetchError(cause, msg) {
        var _this = _super.call(this, msg) || this;
        _this.cause = cause;
        _this.name = "FetchError";
        return _this;
    }
    return FetchError;
}(Error));
exports.FetchError = FetchError;
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
function exists(json, key) {
    var value = json[key];
    return value !== null && value !== undefined;
}
exports.exists = exists;
function querystring(params, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return Object.keys(params)
        .map(function (key) { return querystringSingleKey(key, params[key], prefix); })
        .filter(function (part) { return part.length > 0; })
        .join('&');
}
exports.querystring = querystring;
function querystringSingleKey(key, value, keyPrefix) {
    if (keyPrefix === void 0) { keyPrefix = ''; }
    var fullKey = keyPrefix + (keyPrefix.length ? "[".concat(key, "]") : key);
    if (value instanceof Array) {
        var multiValue = value.map(function (singleValue) { return encodeURIComponent(String(singleValue)); })
            .join("&".concat(encodeURIComponent(fullKey), "="));
        return "".concat(encodeURIComponent(fullKey), "=").concat(multiValue);
    }
    if (value instanceof Set) {
        var valueAsArray = Array.from(value);
        return querystringSingleKey(key, valueAsArray, keyPrefix);
    }
    if (value instanceof Date) {
        return "".concat(encodeURIComponent(fullKey), "=").concat(encodeURIComponent(value.toISOString()));
    }
    if (value instanceof Object) {
        return querystring(value, fullKey);
    }
    return "".concat(encodeURIComponent(fullKey), "=").concat(encodeURIComponent(String(value)));
}
function mapValues(data, fn) {
    return Object.keys(data).reduce(function (acc, key) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[key] = fn(data[key]), _a)));
    }, {});
}
exports.mapValues = mapValues;
function canConsumeForm(consumes) {
    for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
        var consume = consumes_1[_i];
        if ('multipart/form-data' === consume.contentType) {
            return true;
        }
    }
    return false;
}
exports.canConsumeForm = canConsumeForm;
var JSONApiResponse = /** @class */ (function () {
    function JSONApiResponse(raw, transformer) {
        if (transformer === void 0) { transformer = function (jsonValue) { return jsonValue; }; }
        this.raw = raw;
        this.transformer = transformer;
    }
    JSONApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.transformer;
                        return [4 /*yield*/, this.raw.json()];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    return JSONApiResponse;
}());
exports.JSONApiResponse = JSONApiResponse;
var VoidApiResponse = /** @class */ (function () {
    function VoidApiResponse(raw) {
        this.raw = raw;
    }
    VoidApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, undefined];
            });
        });
    };
    return VoidApiResponse;
}());
exports.VoidApiResponse = VoidApiResponse;
var BlobApiResponse = /** @class */ (function () {
    function BlobApiResponse(raw) {
        this.raw = raw;
    }
    BlobApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.raw.blob()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ;
    return BlobApiResponse;
}());
exports.BlobApiResponse = BlobApiResponse;
var TextApiResponse = /** @class */ (function () {
    function TextApiResponse(raw) {
        this.raw = raw;
    }
    TextApiResponse.prototype.value = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.raw.text()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ;
    return TextApiResponse;
}());
exports.TextApiResponse = TextApiResponse;

},{}]},{},[3])(3)
});
